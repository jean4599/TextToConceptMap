import React, { Component } from 'react';
import PropTypes from 'prop-types';
import './Text.css';

const KEY_CODES = {
  TAB: 9,
  ENTER: 13,
  BACKSPACE: 8,
  UP: 38,
  DOWN: 40,
};

export default class Text extends Component {
  static propTypes = {
    setText: PropTypes.func.isRequired,
    className: PropTypes.string.isRequired,
  }
  state = {
    previousLine:1,
  }
  constructor(props) {
    super(props);
    this.onChange = this.onChange.bind(this);
    this.onKeyDown = this.onKeyDown.bind(this);
    this.onKeyPress = this.onKeyPress.bind(this);
    this.onKeyUp = this.onKeyUp.bind(this);
    this.onScroll = this.onScroll.bind(this);
    this.onClick = this.onClick.bind(this);
  }

  onChange() {
    this.props.setText(this.area.value);
  }

  onKeyPress(){
    const currentCorsor = this.area.selectionStart;
    var text = this.area.value;
    var previous_text = text[currentCorsor-1];
    console.log(text[currentCorsor])
    if(currentCorsor === 0 || previous_text === '\n'||previous_text === '\t'){
      const currentLine = this.getCurrentLineNumber();
      //if(text[currentCorsor] !== undefined && text[currentCorsor] !== '\n')this.props.addTimeStamp(currentLine-1, 1)
      this.props.addTimeStamp(currentLine-1)
    }
  }
  onKeyUp(e){
    if (e.keyCode === KEY_CODES.ENTER) {
      const currentCorsor = this.area.selectionStart;
      const currentLine = this.getCurrentLineNumber();

      var text = this.area.value;
      console.log('onKeyUp enter', text[currentCorsor])
      if(text[currentCorsor] !== undefined)this.props.addTimeStamp(currentLine-1);
    }
  }
  onKeyDown(e){
    if (e.keyCode === KEY_CODES.TAB) {
      //this.onKeyPress();

      let text = this.area.value;
      const currentCorsorStart = this.area.selectionStart;
      const currentCorsorEnd = this.area.selectionEnd;
      var currentCorsor = currentCorsorEnd;
      let nextCursorPos;
      if (e.shiftKey && text[currentCorsor - 1] === '\t') {
            text = `${text.slice(0, currentCorsor - 1)}${text.slice(currentCorsor)}`;
            nextCursorPos = currentCorsor - 1;
          } else {
            text = `${text.slice(0, currentCorsor)}\t${text.slice(currentCorsor)}`;
            nextCursorPos = currentCorsor + 1;
          }
      currentCorsor-=1;
      while(currentCorsor >= currentCorsorStart){
        if(currentCorsor-1 === 0 || text[currentCorsor-1] === '\n' || text[currentCorsor - 1] === '\t'){

          if (e.shiftKey && text[currentCorsor - 1] === '\t') {
            text = `${text.slice(0, currentCorsor - 1)}${text.slice(currentCorsor)}`;
            nextCursorPos = currentCorsor - 1;
          } else {
            text = `${text.slice(0, currentCorsor)}\t${text.slice(currentCorsor)}`;
            nextCursorPos = currentCorsor + 1;
          }

        }
          currentCorsor-=1;
      }

      this.area.value = text;
      this.area.selectionStart = nextCursorPos;
      this.area.selectionEnd = nextCursorPos;
      this.onChange();
      e.preventDefault();
    }
    if(e.keyCode === KEY_CODES.ENTER){
      this.onScroll()
      this.onClick()
    }
    if(e.keyCode === KEY_CODES.BACKSPACE){

      const currentCorsorStart = this.area.selectionStart;
      const currentCorsorEnd = this.area.selectionEnd;
      var currentCorsor = currentCorsorEnd; // eslint-disable-next-line
      while(currentCorsor >= currentCorsorStart){
          var text = this.area.value;
          if(currentCorsor-1 === 0 || text[currentCorsor-1] === '\n'){
            const currentLine = this.getLineNumber(currentCorsor);
            this.props.deleteTimeStamp(currentLine-1, 0)
          }
          currentCorsor-=1;
      }    
      this.onChange();
    }
    if(e.keyCode === KEY_CODES.UP || e.keyCode === KEY_CODES.DOWN){
      this.onClick()
    }
  }
  onClick(){
    var currentLine = this.getCurrentLineNumber()
    console.log('currnetLine is ',currentLine)
    this.setState({
      previousLine: currentLine,
    })
  }
  onScroll(){
    //console.log('Scroll: ', this.area.scrollTop)
    this.props.scrollInput(this.area.scrollTop)
  }
  getCurrentLineNumber(){
    var lines = this.area.value.substr(0, this.area.selectionStart).split("\n")
    var currentLine = lines.length;
    return currentLine
  }
  getLineNumber(cursor){
    var lines = this.area.value.substr(0, cursor).split("\n")
    var currentLine = lines.length;
    return currentLine
  }
  getTotalLineNumber(){
    return this.area.value.split("\n").length
  }
  render() {
    const instruction="the concept map(below)\n\t-can be generated by\n\t\t this text area\n\t\t\t-follows the rules"+
    "\n\t\t\t\ttab \n\t\t\t\t\tappend a sub-concept \n\t\t\t\t\tcause an error if we can't find parent concept"+
    "\n\t\t\t\t'-' \n\t\t\t\t\tprefix represents a link phrase\npress enter and see what happen!";
    return (
      <textarea
        className={this.props.className}
        ref={(input) => { this.area = input; }}
        onChange={this.onChange}
        onKeyUp={this.onKeyUp}
        onKeyDown={this.onKeyDown}
        onKeyPress={this.onKeyPress}
        onScroll={this.onScroll}
        onClick={this.onClick}
        defaultValue={instruction}
      />
      );
  }
}
